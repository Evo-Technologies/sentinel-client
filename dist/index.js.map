{"version":3,"sources":["../src/index.ts","../src/project.ts","../src/client.ts","../src/integration.ts","../src/autogen.ts"],"sourcesContent":["export { SentinelClient } from \"./client\";\r\nexport { SentinelProject } from \"./project\";\r\nexport { SentinelIntegration } from \"./integration\";\r\nexport * from \"./autogen\";","import { SentinelClient } from \"./client\";\r\nimport { SentinelIntegration } from \"./integration\";\r\n\r\nexport class SentinelProject {\r\n    id: string;\r\n    client: SentinelClient;\r\n    constructor(client: SentinelClient, id: string) {\r\n        this.client = client;\r\n        this.id = id;\r\n    }\r\n\r\n    getIntegration<T extends SentinelIntegration>(type: { new(project:SentinelProject, idOrName:string): T }, idOrName: string ): T {\r\n        return new type(this, idOrName);\r\n    }\r\n}","import { SentinelProject } from \"./project\";\r\n\r\nexport class SentinelClient {\r\n    apiKey: string;\r\n    endpoint: string;\r\n    constructor(apiKey:string, endpoint?:string) {\r\n        this.apiKey = apiKey;\r\n        this.endpoint = endpoint || \"https://sentinelapi.evo.tech\";\r\n        console.log(\"sentinel client initialized\", this.apiKey, this.endpoint);\r\n    }\r\n\r\n    getProject(projectId:string) {\r\n        return new SentinelProject(this, projectId);\r\n    }\r\n\r\n    async sendRequest(projectId:string, integrationNameOrId:string, requestName: string, request: any) : Promise<any> {\r\n        const uri = `${this.endpoint}/projects/${projectId}/integrations/${integrationNameOrId}/requests/${requestName}`;\r\n        console.log(\"fetching\", uri);\r\n        const r = await fetch(uri, {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\" : \"application/json\",\r\n                \"Accept\": \"application/json\",\r\n                \"Sentinel-Api-Key\": this.apiKey\r\n            },\r\n            body: JSON.stringify(request)\r\n        });\r\n\r\n        if (r.ok) {\r\n            return await r.json();\r\n        } else {\r\n            const errorText = await r.text();\r\n            throw new Error(`${r.status} [${r.statusText}]: ${errorText}`);\r\n        }\r\n    }\r\n}","import { SentinelProject } from \"./project\";\r\n\r\nexport class SentinelIntegration {\r\n    idOrName: string;\r\n    project: SentinelProject;\r\n\r\n    constructor(project: SentinelProject, idOrName: string) {\r\n        this.project = project;\r\n        this.idOrName = idOrName;\r\n    }\r\n\r\n    async sendRequest(name:string, request: any) {\r\n        return await this.project.client.sendRequest(this.project.id, this.idOrName, name, request);\r\n    }\r\n}","\r\n// https://localhost:7082/ts\r\nimport { SentinelProject } from \"./project\"\r\nimport { SentinelIntegration } from \"./integration\"\r\nexport namespace EvoVoiceIntegration {\r\n    export class Integration extends SentinelIntegration {\r\n        constructor(project: SentinelProject, idOrName:string) {\r\n            super(project, idOrName);\r\n        }\r\n    async listCustomers(request:ListCustomersRequest) : Promise<ListCustomersResponse> {\r\n        return await this.sendRequest('ListCustomers', request);\r\n    }\r\n    async getCustomer(request:GetCustomerRequest) : Promise<GetCustomerResponse> {\r\n        return await this.sendRequest('GetCustomer', request);\r\n    }\r\n    }\r\n    export interface ListCustomersRequest {\r\n        accountIds?:string[],\n        nameFilter?:string,\n        parentCustomerIds?:string[],\n        shallowParent?:boolean,\n        tagIds?:string[],\n        page?:number,\n        all?:boolean,\n        countPerPage?:number,\n        specificIds?:string[],\n        sortField?:string,\n        sortOrder?:number,\n        simplifiedPaging?:boolean,\n    }\r\n    export interface ListCustomersResponse {\r\n        items?:{\n                name?:string,\n                parentAccountId?:string,\n                twilioAccountSid?:string,\n                ancestorIds?:string[],\n                maxPhoneNumbers?:number,\n                isBYOA?:boolean,\n                trustHubProfileSid?:string,\n                logoId?:string,\n                logoUri?:string,\n                billingSettings?:{\n                    base?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    localNumbers?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    tollFreeNumbers?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    inboundVoiceCalls?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    outboundVoiceCalls?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    inboundFaxes?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    outboundFaxes?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    inboundSmsMessages?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    outboundSmsMessages?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    aIInsights?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    aILiveMinutes?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                    aIMessages?:{\n                        baseCost?:number,\n                        rawUnitMultiplier?:number,\n                        unitCost?:number,\n                        allowance?:number,\n                    },\n                },\n                id?:string,\n                dateCreated?:string,\n                dateLastModified?:string,\n                createdBy?:string,\n                lastModifiedBy?:string,\n            }[],\n        totalCount?:number,\n        totalPages?:number,\n        hasMorePages?:boolean,\n    }\r\n    export interface GetCustomerRequest {\r\n        customerId?:string,\n    }\r\n    export interface GetCustomerResponse {\r\n        accountId?:string,\n        parentCustomerId?:string,\n        breadcrumb?:{\n                id?:string,\n                name?:string,\n            }[],\n        accountName?:string,\n        isStaging?:boolean,\n        name?:string,\n        referenceId?:string,\n        data?:{\n        },\n        tags?:{\n                id?:string,\n                name?:string,\n                color?:number,\n            }[],\n        schedule?:{\n            timeZoneId?:string,\n            inherit?:boolean,\n            forceClosed?:boolean,\n            rules?:{\n                    id?:string,\n                    name?:string,\n                    priority?:number,\n                    state?:string,\n                    source?:string,\n                    condition?:string,\n                    simpleRuleType?:number,\n                    customerState?:string,\n                    flowId?:string,\n                    flowParams?:{\n                    },\n                    isAllDay?:boolean,\n                    startDate?:string,\n                    startTime?:string,\n                    endTime?:string,\n                    bySetPosition?:number[],\n                    byMonth?:number[],\n                    byWeekNo?:number[],\n                    byYearDay?:number[],\n                    byMonthDay?:number[],\n                    byDay?:{\n                            offset?:number,\n                            dayOfWeek?:number,\n                        }[],\n                    byHour?:number[],\n                    byMinute?:number[],\n                    interval?:number,\n                    count?:number,\n                    untilDate?:string,\n                    frequency?:number,\n                }[],\n            defaultState?:string,\n        },\n        integrationData?:{\n        },\n        overrideBillingSettings?:boolean,\n        billingSettings?:{\n            base?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            localNumbers?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            tollFreeNumbers?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            inboundVoiceCalls?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            outboundVoiceCalls?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            inboundFaxes?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            outboundFaxes?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            inboundSmsMessages?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            outboundSmsMessages?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            aIInsights?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            aILiveMinutes?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n            aIMessages?:{\n                baseCost?:number,\n                rawUnitMultiplier?:number,\n                unitCost?:number,\n                allowance?:number,\n            },\n        },\n        overrideAppSettings?:boolean,\n        appSettings?:{\n            enablePhoneNumberManagement?:boolean,\n            enableDeviceManagement?:boolean,\n            enableDialer?:boolean,\n            enableCallHistory?:boolean,\n            enableAssistants?:boolean,\n            showFileNameInMessageCenter?:boolean,\n            chakraTheme?:string,\n            customCss?:string,\n            pageTitle?:string,\n            stringMappings?:string,\n            logoutUrl?:string,\n            portMyNumberUrl?:string,\n        },\n        id?:string,\n        dateCreated?:string,\n        dateLastModified?:string,\n        createdBy?:string,\n        lastModifiedBy?:string,\n    }\r\n}\r\nexport namespace GptIntegration {\r\n    export class Integration extends SentinelIntegration {\r\n        constructor(project: SentinelProject, idOrName:string) {\r\n            super(project, idOrName);\r\n        }\r\n    async completeChatAsync(request:CompleteChatAsyncRequest) : Promise<CompleteChatAsyncResponse> {\r\n        return await this.sendRequest('CompleteChatAsync', request);\r\n    }\r\n    }\r\n    export interface CompleteChatAsyncRequest {\r\n        messages?:{\n                role?:string,\n                content?:string,\n                name?:string,\n            }[],\n        temperature?:number,\n    }\r\n    export interface CompleteChatAsyncResponse {\r\n        content?:{\n                text?:string,\n            }[],\n    }\r\n}\r\nexport namespace FreshdeskIntegration {\r\n    export class Integration extends SentinelIntegration {\r\n        constructor(project: SentinelProject, idOrName:string) {\r\n            super(project, idOrName);\r\n        }\r\n    async listAllTickets(request:ListAllTicketsRequest) : Promise<ListAllTicketsResponse> {\r\n        return await this.sendRequest('ListAllTickets', request);\r\n    }\r\n    }\r\n    export interface ListAllTicketsRequest {\r\n    }\r\n    export interface ListAllTicketsResponse {\r\n    }\r\n}\r\n\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACGO,IAAM,kBAAN,MAAsB;AAAA,EAGzB,YAAY,QAAwB,IAAY;AAC5C,SAAK,SAAS;AACd,SAAK,KAAK;AAAA,EACd;AAAA,EAEA,eAA8C,MAA4D,UAAsB;AAC5H,WAAO,IAAI,KAAK,MAAM,QAAQ;AAAA,EAClC;AACJ;;;ACZO,IAAM,iBAAN,MAAqB;AAAA,EAGxB,YAAY,QAAe,UAAkB;AACzC,SAAK,SAAS;AACd,SAAK,WAAW,YAAY;AAC5B,YAAQ,IAAI,+BAA+B,KAAK,QAAQ,KAAK,QAAQ;AAAA,EACzE;AAAA,EAEA,WAAW,WAAkB;AACzB,WAAO,IAAI,gBAAgB,MAAM,SAAS;AAAA,EAC9C;AAAA,EAEM,YAAY,WAAkB,qBAA4B,aAAqB,SAA6B;AAAA;AAC9G,YAAM,MAAM,GAAG,KAAK,QAAQ,aAAa,SAAS,iBAAiB,mBAAmB,aAAa,WAAW;AAC9G,cAAQ,IAAI,YAAY,GAAG;AAC3B,YAAM,IAAI,MAAM,MAAM,KAAK;AAAA,QACvB,QAAQ;AAAA,QACR,SAAS;AAAA,UACL,gBAAiB;AAAA,UACjB,UAAU;AAAA,UACV,oBAAoB,KAAK;AAAA,QAC7B;AAAA,QACA,MAAM,KAAK,UAAU,OAAO;AAAA,MAChC,CAAC;AAED,UAAI,EAAE,IAAI;AACN,eAAO,MAAM,EAAE,KAAK;AAAA,MACxB,OAAO;AACH,cAAM,YAAY,MAAM,EAAE,KAAK;AAC/B,cAAM,IAAI,MAAM,GAAG,EAAE,MAAM,KAAK,EAAE,UAAU,MAAM,SAAS,EAAE;AAAA,MACjE;AAAA,IACJ;AAAA;AACJ;;;ACjCO,IAAM,sBAAN,MAA0B;AAAA,EAI7B,YAAY,SAA0B,UAAkB;AACpD,SAAK,UAAU;AACf,SAAK,WAAW;AAAA,EACpB;AAAA,EAEM,YAAY,MAAa,SAAc;AAAA;AACzC,aAAO,MAAM,KAAK,QAAQ,OAAO,YAAY,KAAK,QAAQ,IAAI,KAAK,UAAU,MAAM,OAAO;AAAA,IAC9F;AAAA;AACJ;;;ACVO,IAAU;AAAA,CAAV,CAAUA,yBAAV;AAAA,EACI,MAAM,oBAAoB,oBAAoB;AAAA,IACjD,YAAY,SAA0B,UAAiB;AACnD,YAAM,SAAS,QAAQ;AAAA,IAC3B;AAAA,IACE,cAAc,SAA+D;AAAA;AAC/E,eAAO,MAAM,KAAK,YAAY,iBAAiB,OAAO;AAAA,MAC1D;AAAA;AAAA,IACM,YAAY,SAA2D;AAAA;AACzE,eAAO,MAAM,KAAK,YAAY,eAAe,OAAO;AAAA,MACxD;AAAA;AAAA,EACA;AAVO,EAAAA,qBAAM;AAAA,GADA;AAuRV,IAAU;AAAA,CAAV,CAAUC,oBAAV;AAAA,EACI,MAAM,oBAAoB,oBAAoB;AAAA,IACjD,YAAY,SAA0B,UAAiB;AACnD,YAAM,SAAS,QAAQ;AAAA,IAC3B;AAAA,IACE,kBAAkB,SAAuE;AAAA;AAC3F,eAAO,MAAM,KAAK,YAAY,qBAAqB,OAAO;AAAA,MAC9D;AAAA;AAAA,EACA;AAPO,EAAAA,gBAAM;AAAA,GADA;AAuBV,IAAU;AAAA,CAAV,CAAUC,0BAAV;AAAA,EACI,MAAM,oBAAoB,oBAAoB;AAAA,IACjD,YAAY,SAA0B,UAAiB;AACnD,YAAM,SAAS,QAAQ;AAAA,IAC3B;AAAA,IACE,eAAe,SAAiE;AAAA;AAClF,eAAO,MAAM,KAAK,YAAY,kBAAkB,OAAO;AAAA,MAC3D;AAAA;AAAA,EACA;AAPO,EAAAA,sBAAM;AAAA,GADA;","names":["EvoVoiceIntegration","GptIntegration","FreshdeskIntegration"]}